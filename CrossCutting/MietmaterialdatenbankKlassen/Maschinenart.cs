//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Crosscutting.MietmaterialdatenbankKlassen
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Maschinenkauf))]
    [KnownType(typeof(Vermietung))]
    [KnownType(typeof(Lagerbestand))]
    public partial class Maschinenart: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Simple Properties
    
        [DataMember]
        public int Maschinenart_ID
        {
            get { return _maschinenart_ID; }
            set
            {
                if (_maschinenart_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Maschinenart_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _maschinenart_ID = value;
                    OnPropertyChanged("Maschinenart_ID");
                }
            }
        }
        private int _maschinenart_ID;
    
        [DataMember]
        public int Gesamtkosten
        {
            get { return _gesamtkosten; }
            set
            {
                if (_gesamtkosten != value)
                {
                    _gesamtkosten = value;
                    OnPropertyChanged("Gesamtkosten");
                }
            }
        }
        private int _gesamtkosten;
    
        [DataMember]
        public int Gesamteinnahmen
        {
            get { return _gesamteinnahmen; }
            set
            {
                if (_gesamteinnahmen != value)
                {
                    _gesamteinnahmen = value;
                    OnPropertyChanged("Gesamteinnahmen");
                }
            }
        }
        private int _gesamteinnahmen;
    
        [DataMember]
        public int Vermietfaktor
        {
            get { return _vermietfaktor; }
            set
            {
                if (_vermietfaktor != value)
                {
                    _vermietfaktor = value;
                    OnPropertyChanged("Vermietfaktor");
                }
            }
        }
        private int _vermietfaktor;
    
        [DataMember]
        public double Tagessatz
        {
            get { return _tagessatz; }
            set
            {
                if (_tagessatz != value)
                {
                    _tagessatz = value;
                    OnPropertyChanged("Tagessatz");
                }
            }
        }
        private double _tagessatz;
    
        [DataMember]
        public double Rentabilität
        {
            get { return _rentabilität; }
            set
            {
                if (_rentabilität != value)
                {
                    _rentabilität = value;
                    OnPropertyChanged("Rentabilität");
                }
            }
        }
        private double _rentabilität;
    
        [DataMember]
        public string Maschinenartbezeichnung
        {
            get { return _maschinenartbezeichnung; }
            set
            {
                if (_maschinenartbezeichnung != value)
                {
                    _maschinenartbezeichnung = value;
                    OnPropertyChanged("Maschinenartbezeichnung");
                }
            }
        }
        private string _maschinenartbezeichnung;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Maschinenkauf> Maschinenkaufliste
        {
            get
            {
                if (_maschinenkaufliste == null)
                {
                    _maschinenkaufliste = new TrackableCollection<Maschinenkauf>();
                    _maschinenkaufliste.CollectionChanged += FixupMaschinenkaufliste;
                }
                return _maschinenkaufliste;
            }
            set
            {
                if (!ReferenceEquals(_maschinenkaufliste, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_maschinenkaufliste != null)
                    {
                        _maschinenkaufliste.CollectionChanged -= FixupMaschinenkaufliste;
                    }
                    _maschinenkaufliste = value;
                    if (_maschinenkaufliste != null)
                    {
                        _maschinenkaufliste.CollectionChanged += FixupMaschinenkaufliste;
                    }
                    OnNavigationPropertyChanged("Maschinenkaufliste");
                }
            }
        }
        private TrackableCollection<Maschinenkauf> _maschinenkaufliste;
    
        [DataMember]
        public TrackableCollection<Vermietung> Vermietung
        {
            get
            {
                if (_vermietung == null)
                {
                    _vermietung = new TrackableCollection<Vermietung>();
                    _vermietung.CollectionChanged += FixupVermietung;
                }
                return _vermietung;
            }
            set
            {
                if (!ReferenceEquals(_vermietung, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_vermietung != null)
                    {
                        _vermietung.CollectionChanged -= FixupVermietung;
                    }
                    _vermietung = value;
                    if (_vermietung != null)
                    {
                        _vermietung.CollectionChanged += FixupVermietung;
                    }
                    OnNavigationPropertyChanged("Vermietung");
                }
            }
        }
        private TrackableCollection<Vermietung> _vermietung;
    
        [DataMember]
        public Lagerbestand Lagerbestand
        {
            get { return _lagerbestand; }
            set
            {
                if (!ReferenceEquals(_lagerbestand, value))
                {
                    var previousValue = _lagerbestand;
                    _lagerbestand = value;
                    FixupLagerbestand(previousValue);
                    OnNavigationPropertyChanged("Lagerbestand");
                }
            }
        }
        private Lagerbestand _lagerbestand;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Maschinenkaufliste.Clear();
            Vermietung.Clear();
            Lagerbestand = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupLagerbestand(Lagerbestand previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.Maschinenart, this))
            {
                previousValue.Maschinenart = null;
            }
    
            if (Lagerbestand != null)
            {
                Lagerbestand.Maschinenart = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Lagerbestand")
                    && (ChangeTracker.OriginalValues["Lagerbestand"] == Lagerbestand))
                {
                    ChangeTracker.OriginalValues.Remove("Lagerbestand");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Lagerbestand", previousValue);
                }
                if (Lagerbestand != null && !Lagerbestand.ChangeTracker.ChangeTrackingEnabled)
                {
                    Lagerbestand.StartTracking();
                }
            }
        }
    
        private void FixupMaschinenkaufliste(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Maschinenkauf item in e.NewItems)
                {
                    item.Maschinenartenliste = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Maschinenkaufliste", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Maschinenkauf item in e.OldItems)
                {
                    if (ReferenceEquals(item.Maschinenartenliste, this))
                    {
                        item.Maschinenartenliste = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Maschinenkaufliste", item);
                    }
                }
            }
        }
    
        private void FixupVermietung(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Vermietung item in e.NewItems)
                {
                    item.Maschinenart.Add(this);
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Vermietung", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Vermietung item in e.OldItems)
                {
                    if (item.Maschinenart.Contains(this))
                    {
                        item.Maschinenart.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Vermietung", item);
                    }
                }
            }
        }

        #endregion

    }
}
