//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Crosscutting.MietmaterialdatenbankKlassen
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Maschinenart))]
    [KnownType(typeof(Kunde))]
    public partial class Vermietung: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Simple Properties
    
        [DataMember]
        public int Vermiet_ID
        {
            get { return _vermiet_ID; }
            set
            {
                if (_vermiet_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Vermiet_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _vermiet_ID = value;
                    OnPropertyChanged("Vermiet_ID");
                }
            }
        }
        private int _vermiet_ID;
    
        [DataMember]
        public System.DateTime Vermietbegin
        {
            get { return _vermietbegin; }
            set
            {
                if (_vermietbegin != value)
                {
                    _vermietbegin = value;
                    OnPropertyChanged("Vermietbegin");
                }
            }
        }
        private System.DateTime _vermietbegin;
    
        [DataMember]
        public System.DateTime Vermietende
        {
            get { return _vermietende; }
            set
            {
                if (_vermietende != value)
                {
                    _vermietende = value;
                    OnPropertyChanged("Vermietende");
                }
            }
        }
        private System.DateTime _vermietende;
    
        [DataMember]
        public double Gesamtpreis
        {
            get { return _gesamtpreis; }
            set
            {
                if (_gesamtpreis != value)
                {
                    _gesamtpreis = value;
                    OnPropertyChanged("Gesamtpreis");
                }
            }
        }
        private double _gesamtpreis;
    
        [DataMember]
        public int Kunden_ID
        {
            get { return _kunden_ID; }
            set
            {
                if (_kunden_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("Kunden_ID", _kunden_ID);
                    if (!IsDeserializing)
                    {
                        if (Kunde != null && Kunde.Kunden_ID != value)
                        {
                            Kunde = null;
                        }
                    }
                    _kunden_ID = value;
                    OnPropertyChanged("Kunden_ID");
                }
            }
        }
        private int _kunden_ID;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Maschinenart> Maschinenart
        {
            get
            {
                if (_maschinenart == null)
                {
                    _maschinenart = new TrackableCollection<Maschinenart>();
                    _maschinenart.CollectionChanged += FixupMaschinenart;
                }
                return _maschinenart;
            }
            set
            {
                if (!ReferenceEquals(_maschinenart, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_maschinenart != null)
                    {
                        _maschinenart.CollectionChanged -= FixupMaschinenart;
                    }
                    _maschinenart = value;
                    if (_maschinenart != null)
                    {
                        _maschinenart.CollectionChanged += FixupMaschinenart;
                    }
                    OnNavigationPropertyChanged("Maschinenart");
                }
            }
        }
        private TrackableCollection<Maschinenart> _maschinenart;
    
        [DataMember]
        public Kunde Kunde
        {
            get { return _kunde; }
            set
            {
                if (!ReferenceEquals(_kunde, value))
                {
                    var previousValue = _kunde;
                    _kunde = value;
                    FixupKunde(previousValue);
                    OnNavigationPropertyChanged("Kunde");
                }
            }
        }
        private Kunde _kunde;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Maschinenart.Clear();
            Kunde = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupKunde(Kunde previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Vermietung.Contains(this))
            {
                previousValue.Vermietung.Remove(this);
            }
    
            if (Kunde != null)
            {
                Kunde.Vermietung.Add(this);
    
                Kunden_ID = Kunde.Kunden_ID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Kunde")
                    && (ChangeTracker.OriginalValues["Kunde"] == Kunde))
                {
                    ChangeTracker.OriginalValues.Remove("Kunde");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Kunde", previousValue);
                }
                if (Kunde != null && !Kunde.ChangeTracker.ChangeTrackingEnabled)
                {
                    Kunde.StartTracking();
                }
            }
        }
    
        private void FixupMaschinenart(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Maschinenart item in e.NewItems)
                {
                    item.Vermietung.Add(this);
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Maschinenart", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Maschinenart item in e.OldItems)
                {
                    if (item.Vermietung.Contains(this))
                    {
                        item.Vermietung.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Maschinenart", item);
                    }
                }
            }
        }

        #endregion

    }
}
