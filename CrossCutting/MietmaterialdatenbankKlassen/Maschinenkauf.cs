//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Crosscutting.MietmaterialdatenbankKlassen
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Maschinenart))]
    public partial class Maschinenkauf: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Simple Properties
    
        [DataMember]
        public int Maschinenkauf_ID
        {
            get { return _maschinenkauf_ID; }
            set
            {
                if (_maschinenkauf_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Maschinenkauf_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _maschinenkauf_ID = value;
                    OnPropertyChanged("Maschinenkauf_ID");
                }
            }
        }
        private int _maschinenkauf_ID;
    
        [DataMember]
        public int Anzahl
        {
            get { return _anzahl; }
            set
            {
                if (_anzahl != value)
                {
                    _anzahl = value;
                    OnPropertyChanged("Anzahl");
                }
            }
        }
        private int _anzahl;
    
        [DataMember]
        public int Einzelpreis
        {
            get { return _einzelpreis; }
            set
            {
                if (_einzelpreis != value)
                {
                    _einzelpreis = value;
                    OnPropertyChanged("Einzelpreis");
                }
            }
        }
        private int _einzelpreis;
    
        [DataMember]
        public double Rechnungspreis
        {
            get { return _rechnungspreis; }
            set
            {
                if (_rechnungspreis != value)
                {
                    _rechnungspreis = value;
                    OnPropertyChanged("Rechnungspreis");
                }
            }
        }
        private double _rechnungspreis;
    
        [DataMember]
        public System.DateTime Kaufdatum
        {
            get { return _kaufdatum; }
            set
            {
                if (_kaufdatum != value)
                {
                    _kaufdatum = value;
                    OnPropertyChanged("Kaufdatum");
                }
            }
        }
        private System.DateTime _kaufdatum;
    
        [DataMember]
        public int Maschinenart_ID
        {
            get { return _maschinenart_ID; }
            set
            {
                if (_maschinenart_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("Maschinenart_ID", _maschinenart_ID);
                    if (!IsDeserializing)
                    {
                        if (Maschinenartenliste != null && Maschinenartenliste.Maschinenart_ID != value)
                        {
                            Maschinenartenliste = null;
                        }
                    }
                    _maschinenart_ID = value;
                    OnPropertyChanged("Maschinenart_ID");
                }
            }
        }
        private int _maschinenart_ID;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Maschinenart Maschinenartenliste
        {
            get { return _maschinenartenliste; }
            set
            {
                if (!ReferenceEquals(_maschinenartenliste, value))
                {
                    var previousValue = _maschinenartenliste;
                    _maschinenartenliste = value;
                    FixupMaschinenartenliste(previousValue);
                    OnNavigationPropertyChanged("Maschinenartenliste");
                }
            }
        }
        private Maschinenart _maschinenartenliste;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Maschinenartenliste = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupMaschinenartenliste(Maschinenart previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Maschinenkaufliste.Contains(this))
            {
                previousValue.Maschinenkaufliste.Remove(this);
            }
    
            if (Maschinenartenliste != null)
            {
                Maschinenartenliste.Maschinenkaufliste.Add(this);
    
                Maschinenart_ID = Maschinenartenliste.Maschinenart_ID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Maschinenartenliste")
                    && (ChangeTracker.OriginalValues["Maschinenartenliste"] == Maschinenartenliste))
                {
                    ChangeTracker.OriginalValues.Remove("Maschinenartenliste");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Maschinenartenliste", previousValue);
                }
                if (Maschinenartenliste != null && !Maschinenartenliste.ChangeTracker.ChangeTrackingEnabled)
                {
                    Maschinenartenliste.StartTracking();
                }
            }
        }

        #endregion

    }
}
